/*!
 * Start Bootstrap - SB Admin 2 v4.1.3 (https://startbootstrap.com/theme/sb-admin-2)
 * Copyright 2013-2021 Start Bootstrap
 * Licensed under MIT (https://github.com/StartBootstrap/startbootstrap-sb-admin-2/blob/master/LICENSE)
 */

!function(l){"use strict";l("#sidebarToggle, #sidebarToggleTop").on("click",function(e){l("body").toggleClass("sidebar-toggled"),l(".sidebar").toggleClass("toggled"),l(".sidebar").hasClass("toggled")&&l(".sidebar .collapse").collapse("hide")}),l(window).resize(function(){l(window).width()<768&&l(".sidebar .collapse").collapse("hide"),l(window).width()<480&&!l(".sidebar").hasClass("toggled")&&(l("body").addClass("sidebar-toggled"),l(".sidebar").addClass("toggled"),l(".sidebar .collapse").collapse("hide"))}),l("body.fixed-nav .sidebar").on("mousewheel DOMMouseScroll wheel",function(e){var o;768<l(window).width()&&(o=(o=e.originalEvent).wheelDelta||-o.detail,this.scrollTop+=30*(o<0?1:-1),e.preventDefault())}),l(document).on("scroll",function(){100<l(this).scrollTop()?l(".scroll-to-top").fadeIn():l(".scroll-to-top").fadeOut()}),l(document).on("click","a.scroll-to-top",function(e){var o=l(this);l("html, body").stop().animate({scrollTop:l(o.attr("href")).offset().top},1e3,"easeInOutExpo"),e.preventDefault()})}(jQuery);

const email = document.getElementById('Email');
        
const password = document.getElementById('Password');
const formid = document.getElementById('form');
const form = document.querySelector('form');
const email_error = document.querySelector('#email_error');
const labelEmail = document.getElementById('labelEmail');
// const labelEmail = document.getElementById('labelEmail');

const login = document.getElementById('login');
// const emaildiv = document.getElementById('emaildiv');
// const submit = document.getElementById('submit');

const spanError = document.createElement('span');

// spanError.textContent = '';
// document.emaildiv.append(spanError);

// login page form validation

// form.addEventListener('submit',(e)=>{

//     e.preventDefault();
//     validateInputs();


// });

// const isValidEmail = email => {
//     const re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
//     return re.test(String(email).toLowerCase());
// }

// const setError = (element, massage)=>{
//     const inputControl = element.parentElement;
//     const errorDisplay = inputControl.querySelector('.errordisplay');

//     errorDisplay.innerText = massage;
//     inputControl.classList.add('errorm');
//     inputControl.classList.remove('success');
// }

// const setSuccess = element=>{
//     const inputControl = element.parentElement;
//     const errorDisplay = inputControl.querySelector('.errordisplay');

//     errorDisplay.innerText = '';
//     inputControl.classList.add('success');
//     inputControl.classList.remove('errorm');
  
// }

// const validateInputs = () =>{
//     const emailValue = email.value.trim();
//     const passwordValue = password.value.trim();

//     // if(emailValue === !null && passwordValue === !null){
//     //     setError(email, 'Successssssssssssssss!');
//     // }

//     if(emailValue === ''){
//         setError(email, 'Email is required!');
//     }else if(!isValidEmail(emailValue)){
//         setError(email, 'Provide a valid email address!');
//     }else{
//         setSuccess(email);
//     }
//     if(passwordValue === ''){
//         setError(password, 'Password is required!');
//     } else if (passwordValue.length < 8){
//         setError(password, 'Password must be at least 8 characters long!');
//     }else{
//         setSuccess(password);
//     }
    
// };
   
    

// function getLoginErrors(email, password){
//     let errors = [];
//     if(email === "" || email === Null){
//         console.log("Please enter a valid email");
//         // errors.push("Email is required")
//         // email.parentElement.classList.add('erros')
//     }
// }

// Add employees Form Validation



// profile tabs 
const tabs = document.querySelectorAll('.tab_btn');
const all_content  = document.querySelectorAll('.content');


tabs.forEach((tab, index) => {
    tab.addEventListener('click', (e)=>{
        tabs.forEach(tab=>{tab.classList.remove('active')});
        tab.classList.add('active');

        all_content.forEach(content => {content.classList.remove('active')}); 
        all_content[index].classList.add('active');
    })

  

})

const tabsActions = document.querySelectorAll('.Atab_btn');
const all_contenta  = document.querySelectorAll('.content');



tabsActions.forEach((tab, index) => {
    tab.addEventListener('click', (e)=>{
        tabs.forEach(tab=>{tab.classList.remove('active')});
        tab.classList.add('active');

        all_contenta.forEach(content => {content.classList.remove('active')}); 
        all_contenta[index].classList.add('active');
    })

  

})


// otp functianlitty

const inputs = document.querySelectorAll("#inputOTP"),
  button = document.querySelector("#btnOTP");
// iterate over all inputs
inputs.forEach((input, index1) => {
  input.addEventListener("keyup", (e) => {
    // This code gets the current input element and stores it in the currentInput variable
    // This code gets the next sibling element of the current input element and stores it in the nextInput variable
    // This code gets the previous sibling element of the current input element and stores it in the prevInput variable
    const currentInput = input,
      nextInput = input.nextElementSibling,
      prevInput = input.previousElementSibling;
    // if the value has more than one character then clear it
    if (currentInput.value.length > 1) {
      currentInput.value = "";
      return;
    }
    // if the next input is disabled and the current value is not empty
    //  enable the next input and focus on it
    if (nextInput && nextInput.hasAttribute("disabled") && currentInput.value !== "") {
      nextInput.removeAttribute("disabled");
      nextInput.focus();
    }
    // if the backspace key is pressed
    if (e.key === "Backspace") {
      // iterate over all inputs again
      inputs.forEach((input, index2) => {
        // if the index1 of the current input is less than or equal to the index2 of the input in the outer loop
        // and the previous element exists, set the disabled attribute on the input and focus on the previous element
        if (index1 <= index2 && prevInput) {
          input.setAttribute("disabled", true);
          input.value = "";
          prevInput.focus();
        }
      });
    }
    //if the fourth input( which index number is 3) is not empty and has not disable attribute then
    //add active class if not then remove the active class.
    if (!inputs[3].disabled && inputs[3].value !== "") {
      button.classList.add("active");
      return;
    }
    button.classList.remove("active");
  });
});
//focus the first input which index is 0 on window load
window.addEventListener("load", () => inputs[0].focus());

// end 





